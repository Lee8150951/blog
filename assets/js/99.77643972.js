(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{593:function(t,s,e){"use strict";e.r(s);var a=e(7),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"一、客户端client编程实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、客户端client编程实现"}},[t._v("#")]),t._v(" 一、客户端Client编程实现")]),t._v(" "),e("h3",{attrs:{id:"_1-1创建功能包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1创建功能包"}},[t._v("#")]),t._v(" 1.1创建功能包")]),t._v(" "),e("p",[t._v("在src目录下使用命令创建功能包")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("catkin_create_pkg learning_service roscpp rospy std_msgs geometry_msgs turtlesim\n")])])]),e("h3",{attrs:{id:"_1-2编写功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2编写功能"}},[t._v("#")]),t._v(" 1.2编写功能")]),t._v(" "),e("p",[t._v("完成功能包创建后编写功能")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('/**\n * 该例程将请求/spawn服务，服务数据类型turtlesim::Spawn\n */\n#include <ros/ros.h>\n#include <turtlesim/Spawn.h>\n\nint main(int argc, char** argv)\n{\n    // 初始化ROS节点\n\tros::init(argc, argv, "turtle_spawn");\n    // 创建节点句柄\n\tros::NodeHandle node;\n    // 发现/spawn服务后，创建一个服务客户端，连接名为/spawn的service\n\tros::service::waitForService("/spawn");\n\tros::ServiceClient add_turtle = node.serviceClient<turtlesim::Spawn>("/spawn");\n    // 初始化turtlesim::Spawn的请求数据\n\tturtlesim::Spawn srv;\n\tsrv.request.x = 2.0;\n\tsrv.request.y = 2.0;\n\tsrv.request.name = "turtle2";\n    // 请求服务调用\n\tROS_INFO("Call service to spwan turtle[x:%0.6f, y:%0.6f, name:%s]", \n\t\t\t srv.request.x, srv.request.y, srv.request.name.c_str());\n\n\tadd_turtle.call(srv);\n\t// 显示服务调用结果\n\tROS_INFO("Spwan turtle successfully [name:%s]", srv.response.name.c_str());\n\treturn 0;\n};\n')])])]),e("h4",{attrs:{id:"_1-2-1代码解读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1代码解读"}},[t._v("#")]),t._v(" 1.2.1代码解读")]),t._v(" "),e("ul",[e("li",[t._v("初始化节点")])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 初始化ROS节点\nros::init(argc, argv, "turtle_spawn");\n')])])]),e("ul",[e("li",[t._v("创建句柄管理资源")])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" // 创建节点句柄\nros::NodeHandle node;\n")])])]),e("ul",[e("li",[t._v("查询当前服务中是否存在服务，如果没有的话就会一直等待")])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('ros::service::waitForService("/spawn");\n')])])]),e("p",[t._v("这是一种阻塞型的API，循环等待spawn服务")]),t._v(" "),e("ul",[e("li",[t._v("创建客户端"),e("code",[t._v("add_turtle")])])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('ros::ServiceClient add_turtle = node.serviceClient<turtlesim::Spawn>("/spawn");\n')])])]),e("p",[t._v("该客户端向spawn客户端发送请求"),e("code",[t._v('("/spawn")')]),t._v("，请求的数据类型"),e("code",[t._v("<turtlesim::Spawn>")])]),t._v(" "),e("ul",[e("li",[t._v("请求数据")])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 初始化turtlesim::Spawn的请求数据\nturtlesim::Spawn srv;\nsrv.request.x = 2.0;\nsrv.request.y = 2.0;\nsrv.request.name = "turtle2";\n')])])]),e("p",[e("code",[t._v("turtlesim::Spawn srv;")]),t._v("作用是定义一个请求数据，后续对数据进行封装")]),t._v(" "),e("ul",[e("li",[t._v("发送log数据")])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 请求服务调用\nROS_INFO("Call service to spwan turtle[x:%0.6f, y:%0.6f, name:%s]", \n\t\t srv.request.x, srv.request.y, srv.request.name.c_str());\n')])])]),e("ul",[e("li",[t._v("发送请求数据")])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("add_turtle.call(srv);\n")])])]),e("p",[e("strong",[t._v("注意")]),t._v("："),e("code",[t._v("call()")]),t._v("方法也是一个阻塞性的函数，执行该函数后会不断等待客户端给予响应")]),t._v(" "),e("ul",[e("li",[t._v("反馈结果")])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 显示服务调用结果\nROS_INFO("Spwan turtle successfully [name:%s]", srv.response.name.c_str());\n')])])]),e("h4",{attrs:{id:"_1-2-2流程总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2流程总结"}},[t._v("#")]),t._v(" 1.2.2流程总结")]),t._v(" "),e("p",[e("strong",[t._v("如何实现一个客户端Client？")])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("初始化ROS节点")]),t._v(" "),e("li",[t._v("创建一个Client实例")]),t._v(" "),e("li",[t._v("发布服务请求数据")]),t._v(" "),e("li",[t._v("等待Server处理之后的应答结果")])])]),t._v(" "),e("h3",{attrs:{id:"_1-3配置编译规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3配置编译规则"}},[t._v("#")]),t._v(" 1.3配置编译规则")]),t._v(" "),e("p",[t._v("在CMakeLists.txt文件的build栏目中添加如下代码：")]),t._v(" "),e("div",{staticClass:"language-cmake extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cmake"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add_executable")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("turtle_spawn src/turtle_spawn.cpp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("target_link_libraries")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("turtle_spawn "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),t._v("catkin_LIBRARIES"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"_1-4编译并运行client"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4编译并运行client"}},[t._v("#")]),t._v(" 1.4编译并运行Client")]),t._v(" "),e("img",{attrs:{src:"https://i.loli.net/2021/07/28/Aj6oqsVMa1dlUwp.png",alt:"2021-07-28 15-18-39 的屏幕截图.png"}}),t._v(" "),e("p",[t._v("执行后运行海龟模拟器，结果如下所示：")]),t._v(" "),e("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://i.loli.net/2021/07/28/uEUgvDAZGLka9sM.png",alt:"2021-07-28 15-27-23 的屏幕截图.png"}}),t._v(" "),e("h2",{attrs:{id:"二、服务端server编程实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、服务端server编程实现"}},[t._v("#")]),t._v(" 二、服务端Server编程实现")]),t._v(" "),e("h3",{attrs:{id:"_2-1编写功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1编写功能"}},[t._v("#")]),t._v(" 2.1编写功能")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('/**\n * 该例程将执行/turtle_command服务，服务数据类型std_srvs/Trigger\n */\n#include <ros/ros.h>\n#include <geometry_msgs/Twist.h>\n#include <std_srvs/Trigger.h>\n\nros::Publisher turtle_vel_pub;\nbool pubCommand = false;\n\n// service回调函数，输入参数req，输出参数res\nbool commandCallback(std_srvs::Trigger::Request  &req,\n         \t\t\tstd_srvs::Trigger::Response &res)\n{\n\tpubCommand = !pubCommand;\n    // 显示请求数据\n    ROS_INFO("Publish turtle velocity command [%s]", pubCommand==true?"Yes":"No");\n\t// 设置反馈数据\n\tres.success = true;\n\tres.message = "Change turtle command state!"\n    return true;\n}\n\nint main(int argc, char **argv)\n{\n    // ROS节点初始化\n    ros::init(argc, argv, "turtle_command_server");\n    // 创建节点句柄\n    ros::NodeHandle n;\n    // 创建一个名为/turtle_command的server，注册回调函数commandCallback\n    ros::ServiceServer command_service = n.advertiseService("/turtle_command", commandCallback);\n\t// 创建一个Publisher，发布名为/turtle1/cmd_vel的topic，消息类型为geometry_msgs::Twist，队列长度10\n\tturtle_vel_pub = n.advertise<geometry_msgs::Twist>("/turtle1/cmd_vel", 10);\n    // 循环等待回调函数\n    ROS_INFO("Ready to receive turtle command.");\n\t// 设置循环的频率\n\tros::Rate loop_rate(10);\n\twhile(ros::ok())\n\t{\n\t\t// 查看一次回调函数队列\n    \tros::spinOnce();\n\t\t// 如果标志为true，则发布速度指令\n\t\tif(pubCommand)\n\t\t{\n\t\t\tgeometry_msgs::Twist vel_msg;\n\t\t\tvel_msg.linear.x = 0.5;\n\t\t\tvel_msg.angular.z = 0.2;\n\t\t\tturtle_vel_pub.publish(vel_msg);\n\t\t}\n\t\t//按照循环频率延时\n\t    loop_rate.sleep();\n\t}\n    return 0;\n}\n')])])]),e("h4",{attrs:{id:"_2-1-1代码解读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1代码解读"}},[t._v("#")]),t._v(" 2.1.1代码解读")]),t._v(" "),e("ul",[e("li",[t._v("初始化节点")])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// ROS节点初始化\nros::init(argc, argv, "turtle_command_server");\n')])])]),e("ul",[e("li",[t._v("创建句柄管理资源")])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 创建节点句柄\nros::NodeHandle n;\n")])])]),e("ul",[e("li",[t._v("创建service")])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 创建一个名为/turtle_command的server，注册回调函数commandCallback\nros::ServiceServer command_service = n.advertiseService("/turtle_command", commandCallback);\n')])])]),e("p",[e("code",[t._v('"/turtle_command"')]),t._v("是自定义的一个service名")]),t._v(" "),e("p",[t._v("通过回调函数来处理收到Client的信息，这一点和Subscriber机制非常相似")]),t._v(" "),e("ul",[e("li",[t._v("创建Publisher，在这里Publisher的主要作用就是给海龟发送速度指令，让海龟动起来")])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 创建一个Publisher，发布名为/turtle1/cmd_vel的topic，消息类型为geometry_msgs::Twist，队列长度10\nturtle_vel_pub = n.advertise<geometry_msgs::Twist>("/turtle1/cmd_vel", 10);\n')])])]),e("ul",[e("li",[t._v("展示日志信息和设置循环频率")])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 循环等待回调函数\nROS_INFO("Ready to receive turtle command.");\n// 设置循环的频率\nros::Rate loop_rate(10);\n')])])]),e("ul",[e("li",[t._v("根据标志位判断是否发送信息")])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("if(pubCommand)\n{\n\tgeometry_msgs::Twist vel_msg;\n\tvel_msg.linear.x = 0.5;\n\tvel_msg.angular.z = 0.2;\n\tturtle_vel_pub.publish(vel_msg);\n}\n")])])]),e("p",[t._v("标志位的处理在回调函数中进行，一旦标志位为true则进入代码块发送运动信息，标志位为false则不发送信息")]),t._v(" "),e("ul",[e("li",[t._v("回调函数处理")])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// service回调函数，输入参数req，输出参数res\nbool commandCallback(std_srvs::Trigger::Request  &req,\n         \t\t\tstd_srvs::Trigger::Response &res)\n{\n\tpubCommand = !pubCommand;\n    // 显示请求数据\n    ROS_INFO("Publish turtle velocity command [%s]", pubCommand==true?"Yes":"No");\n\t// 设置反馈数据\n\tres.success = true;\n\tres.message = "Change turtle command state!"\n    return true;\n}\n')])])]),e("p",[e("code",[t._v("pubCommand = !pubCommand;")]),t._v("标志位处理")]),t._v(" "),e("p",[e("code",[t._v('res.message = "Change turtle command state!"')]),t._v("反馈应答数据")]),t._v(" "),e("h4",{attrs:{id:"_2-1-2流程总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2流程总结"}},[t._v("#")]),t._v(" 2.1.2流程总结")]),t._v(" "),e("p",[e("strong",[t._v("如何实现一个服务器Server？")])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("初始化ROS节点")]),t._v(" "),e("li",[t._v("创建Server实例")]),t._v(" "),e("li",[t._v("循环等待服务请求，进入回调函数")]),t._v(" "),e("li",[t._v("在回调函数中完成服务功能的处理，并反馈应答数据")])])]),t._v(" "),e("h3",{attrs:{id:"_2-2配置编译规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2配置编译规则"}},[t._v("#")]),t._v(" 2.2配置编译规则")]),t._v(" "),e("p",[t._v("在CMakeLists.txt文件的build栏目中添加如下代码：")]),t._v(" "),e("div",{staticClass:"language-cmake extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cmake"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add_executable")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("turtle_command_server src/turtle_command_server.cpp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("target_link_libraries")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("turtle_command_server "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),t._v("catkin_LIBRARIES"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"_2-3编译并运行server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3编译并运行server"}},[t._v("#")]),t._v(" 2.3编译并运行Server")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://i.loli.net/2021/07/28/lDFK1j4AwZVnvR5.png",alt:"2021-07-28 16-38-42 的屏幕截图.png"}}),t._v(" "),e("p",[t._v("执行后运行海龟模拟器，结果如下所示：")]),t._v(" "),e("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://i.loli.net/2021/07/28/PKZDzLOVEptHulT.png",alt:"2021-07-28 16-45-52 的屏幕截图.png"}}),t._v(" "),e("h2",{attrs:{id:"三、服务数据定义与使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、服务数据定义与使用"}},[t._v("#")]),t._v(" 三、服务数据定义与使用")]),t._v(" "),e("p",[t._v("和话题模型类似，在自定义服务数据时也需要自定义一个信息的文件，在话题模型中使用的是.msg文件，但在客户端/服务端模型中使用的是.srv文件")]),t._v(" "),e("h3",{attrs:{id:"_3-1自定义服务数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1自定义服务数据"}},[t._v("#")]),t._v(" 3.1自定义服务数据")]),t._v(" "),e("blockquote",[e("p",[t._v("步骤总览：")]),t._v(" "),e("ul",[e("li",[t._v("定义srv文件")]),t._v(" "),e("li",[t._v("在"),e("code",[t._v("package.xml")]),t._v("中添加功能包依赖")]),t._v(" "),e("li",[t._v("在"),e("code",[t._v("CMakeLists.txt")]),t._v("添加编译选项")]),t._v(" "),e("li",[t._v("编译生成语言相关文件")])])]),t._v(" "),e("h4",{attrs:{id:"_1-定义srv文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义srv文件"}},[t._v("#")]),t._v(" 1）定义srv文件")]),t._v(" "),e("p",[t._v("在功能包下新建文件夹srv，并在文件夹中新建Person.srv文件，写入以下代码")]),t._v(" "),e("div",{staticClass:"language-srv extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("string name\nuint8 age\nuint8 sex\n\nuint8 unknown = 0\nuint8 male = 1\nuint8 female = 2\n---\nstring result\n")])])]),e("p",[e("strong",[t._v("注意：以"),e("code",[t._v("---")]),t._v("进行分割，该符号以上是Client端发送给Server端的信息，该符号以下是Server端反馈给Client端的信息")])]),t._v(" "),e("h4",{attrs:{id:"_2-添加功能包依赖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-添加功能包依赖"}},[t._v("#")]),t._v(" 2）添加功能包依赖")]),t._v(" "),e("p",[t._v("在package.xml文件中添加功能包依赖，如下所示：")]),t._v(" "),e("div",{staticClass:"language-xml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("build_depend")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("message_generation"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("build_depend")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("exec_depend")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("message_runtime"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("exec_depend")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("h4",{attrs:{id:"_3-添加编译选项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-添加编译选项"}},[t._v("#")]),t._v(" 3）添加编译选项")]),t._v(" "),e("ul",[e("li",[t._v("添加message_generation功能包依赖")])]),t._v(" "),e("div",{staticClass:"language-cmake extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cmake"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("find_package")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("catkin REQUIRED COMPONENTS\n  geometry_msgs\n  roscpp\n  rospy\n  std_msgs\n  turtlesim\n  message_generation\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("ul",[e("li",[t._v("在Declare ROS messages, services and actions栏目中添加如下依赖（编译指定头文件）")])]),t._v(" "),e("div",{staticClass:"language-cmake extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cmake"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_service_files")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FILES Person.srv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("generate_messages")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DEPENDENCIES std_msgs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("ul",[e("li",[t._v("添加编译依赖")])]),t._v(" "),e("div",{staticClass:"language-cmake extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cmake"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("catkin_package")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  INCLUDE_DIRS include")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  LIBRARIES learning_service")]),t._v("\n   CATKIN_DEPENDS geometry_msgs roscpp rospy std_msgs turtlesim message_runtime\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  DEPENDS system_lib")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("ul",[e("li",[t._v("编译，并会生成三个文件")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2021/07/28/cnIo4j8Mg6AkSHG.png",alt:"2021-07-28 17-21-31 的屏幕截图.png"}})]),t._v(" "),e("h3",{attrs:{id:"_3-2创建client和server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2创建client和server"}},[t._v("#")]),t._v(" 3.2创建Client和Server")]),t._v(" "),e("h4",{attrs:{id:"_1-client"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-client"}},[t._v("#")]),t._v(" 1）Client")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('/**\n * 该例程将请求/show_person服务，服务数据类型learning_service::Person\n */\n#include <ros/ros.h>\n#include "learning_service/Person.h"\n\nint main(int argc, char** argv)\n{\n    // 初始化ROS节点\n   ros::init(argc, argv, "person_client");\n    // 创建节点句柄\n   ros::NodeHandle node;\n    // 发现/spawn服务后，创建一个服务客户端，连接名为/spawn的service\n   ros::service::waitForService("/show_person");\n   ros::ServiceClient person_client = node.serviceClient<learning_service::Person>("/show_person");\n    // 初始化learning_service::Person的请求数据\n   learning_service::Person srv;\n   srv.request.name = "Tom";\n   srv.request.age  = 20;\n   srv.request.sex  = learning_service::Person::Request::male;\n    // 请求服务调用\n   ROS_INFO("Call service to show person[name:%s, age:%d, sex:%d]", \n          srv.request.name.c_str(), srv.request.age, srv.request.sex);\n   person_client.call(srv);\n   // 显示服务调用结果\n   ROS_INFO("Show person result : %s", srv.response.result.c_str());\n   return 0;\n};\n')])])]),e("h4",{attrs:{id:"_2-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-server"}},[t._v("#")]),t._v(" 2）Server")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('/**\n * 该例程将执行/show_person服务，服务数据类型learning_service::Person\n */\n#include <ros/ros.h>\n#include "learning_service/Person.h"\n\n// service回调函数，输入参数req，输出参数res\nbool personCallback(learning_service::Person::Request  &req,\n                 learning_service::Person::Response &res)\n{\n    // 显示请求数据\n    ROS_INFO("Person: name:%s  age:%d  sex:%d", req.name.c_str(), req.age, req.sex);\n   // 设置反馈数据\n   res.result = "OK";\n    return true;\n}\n\nint main(int argc, char **argv)\n{\n    // ROS节点初始化\n    ros::init(argc, argv, "person_server");\n    // 创建节点句柄\n    ros::NodeHandle n;\n    // 创建一个名为/show_person的server，注册回调函数personCallback\n    ros::ServiceServer person_service = n.advertiseService("/show_person", personCallback);\n    // 循环等待回调函数\n    ROS_INFO("Ready to show person informtion.");\n    ros::spin();\n    return 0;\n}\n')])])]),e("h3",{attrs:{id:"_3-3配置编译规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3配置编译规则"}},[t._v("#")]),t._v(" 3.3配置编译规则")]),t._v(" "),e("div",{staticClass:"language-cmake extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cmake"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add_executable")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person_server src/person_server.cpp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("target_link_libraries")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person_server "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),t._v("catkin_LIBRARIES"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add_dependencies")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person_server "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("PROJECT_NAME")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_gencpp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add_executable")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person_client src/person_client.cpp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("target_link_libraries")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person_client "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),t._v("catkin_LIBRARIES"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add_dependencies")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person_client "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("${")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("PROJECT_NAME")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("_gencpp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"_3-4运行项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4运行项目"}},[t._v("#")]),t._v(" 3.4运行项目")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://i.loli.net/2021/07/28/3G8wLO1ujxeYiN5.png",alt:"2021-07-28 17-29-20 的屏幕截图.png"}}),t._v(" "),e("p",[t._v("运行结果如下所示：")]),t._v(" "),e("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://i.loli.net/2021/07/28/KdFcW3XAUQnZpCS.png",alt:"2021-07-28 17-31-29 的屏幕截图.png"}}),t._v(" "),e("h2",{attrs:{id:"四、模型总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、模型总结"}},[t._v("#")]),t._v(" 四、模型总结")]),t._v(" "),e("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://i.loli.net/2021/07/28/BItmRPGrobij1ch.png",alt:"2021-07-28 16-50-27 的屏幕截图.png"}})])}),[],!1,null,null,null);s.default=r.exports}}]);