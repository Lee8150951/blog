(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{566:function(t,s,a){"use strict";a.r(s);var n=a(7),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、-定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、-定义"}},[t._v("#")]),t._v(" 一、 定义")]),t._v(" "),a("p",[t._v("简单来说，“函数式编程”是一种编程范式，也就是说描述了如何编写程序")]),t._v(" "),a("p",[t._v("属于“结构化编程”的一种")]),t._v(" "),a("p",[a("strong",[t._v("主要思想是：将运算的过程尽量写成一系列嵌套的函数调用")])]),t._v(" "),a("p",[t._v("例如："),a("code",[t._v("(1 + 2) * 3 - 4")])]),t._v(" "),a("p",[t._v("在传统模式下书写为：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])])]),a("p",[t._v("在函数式编程中可以讲运算的过程定义为不同的函数，然后写成如下的形式")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subtract")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("multiply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"二、特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、特点"}},[t._v("#")]),t._v(" 二、特点")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v('函数是"第一等公民"')])])]),t._v(" "),a("p",[t._v("所谓第一等公民（first class），指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。")]),t._v(" "),a("p",[t._v("举例来说，下面代码中的print变量就是一个函数，可以作为另一个函数的参数")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("print"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("strong",[t._v('只用"表达式"，不用"语句"')])])]),t._v(" "),a("p",[t._v('"表达式"是一个单纯的运算过程，总是有返回值；"语句"是执行某种操作，没有返回值')]),t._v(" "),a("p",[t._v("函数式编程要求，只使用表达式，不使用语句")]),t._v(" "),a("p",[t._v("也就是说，每一步都是单纯的运算，而且都有返回值。")]),t._v(" "),a("p",[t._v('原因是函数式编程的开发动机，一开始就是为了处理运算，不考虑系统的读写（I/O）。"语句"属于对系统的读写操作，所以就被排斥在外')]),t._v(" "),a("ul",[a("li",[a("strong",[t._v('没有"副作用"')])])]),t._v(" "),a("p",[t._v("副作用指的是函数内部与外部互动（最典型的情况，就是修改全局变量的值），产生运算以外的其他结果")]),t._v(" "),a("p",[t._v('函数式编程强调没有"副作用"，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值')]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("不修改状态")])])]),t._v(" "),a("p",[t._v("函数式编程只是返回新的值，不修改系统变量")]),t._v(" "),a("p",[a("strong",[t._v("不修改变量，也是它的一个重要特点")])]),t._v(" "),a("p",[t._v('在其他类型的语言中，变量往往用来保存"状态"（state）')]),t._v(" "),a("p",[t._v('不修改变量，意味着状态不能保存在变量中。函数式编程使用参数保存状态，最好的例子就是递归。下面的代码是一个将字符串逆序排列的函数，它演示了不同的参数如何决定了运算所处的"状态"。')]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("引用透明")])])]),t._v(" "),a("p",[t._v('引用透明指的是函数的运行不依赖于外部变量或"状态"，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的')]),t._v(" "),a("h2",{attrs:{id:"三、意义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、意义"}},[t._v("#")]),t._v(" 三、意义")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("代码简洁，开发快速")])])]),t._v(" "),a("p",[t._v("函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("接近自然语言，易于理解")])])]),t._v(" "),a("p",[t._v("函数式编程的自由度很高，可以写出很接近自然语言的代码")]),t._v(" "),a("p",[t._v("前文曾经将表达式(1 + 2) * 3 - 4，写成函数式语言：")]),t._v(" "),a("blockquote",[a("p",[t._v("subtract(multiply(add(1,2), 3), 4)")])]),t._v(" "),a("p",[t._v("对它进行变形，不难得到另一种写法：")]),t._v(" "),a("blockquote",[a("p",[t._v("add(1,2).multiply(3).subtract(4)")])]),t._v(" "),a("p",[t._v("这基本就是自然语言的表达了")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("更方便的代码管理")])])]),t._v(" "),a("p",[t._v("函数式编程不依赖、也不会改变外界的状态，只要给定输入参数，返回的结果必定相同")]),t._v(" "),a("p",[t._v("每一个函数都可以被看做独立单元，很有利于进行单元测试和除错，以及模块化组合")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v('易于"并发编程"')])])]),t._v(" "),a("p",[t._v('函数式编程不需要考虑"死锁"，因为它不修改变量，所以根本不存在"锁"线程的问题')]),t._v(" "),a("p",[t._v('不必担心一个线程的数据，被另一个线程修改，所以可以很放心地把工作分摊到多个线程，部署"并发编程"')])])}),[],!1,null,null,null);s.default=r.exports}}]);