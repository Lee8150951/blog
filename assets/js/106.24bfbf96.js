(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{601:function(t,_,v){"use strict";v.r(_);var o=v(7),a=Object(o.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"一、moveit-系统架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、moveit-系统架构"}},[t._v("#")]),t._v(" 一、MoveIt!系统架构")]),t._v(" "),v("p",[t._v("总架构图：")]),t._v(" "),v("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://i.loli.net/2021/08/13/U9WVlaFPe3vgEOq.png",alt:"20190706211941937.png"}}),t._v(" "),v("h3",{attrs:{id:"_1-1运动组-move-group"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1运动组-move-group"}},[t._v("#")]),t._v(" 1.1运动组（move_group）")]),t._v(" "),v("p",[v("code",[t._v("move_group")]),t._v("是MoveIt!的"),v("strong",[t._v("核心节点")]),t._v("，可以综合其他独立的功能组件为用户提供ROS中的动作指令和服务")]),t._v(" "),v("p",[t._v("该节点本身并不具备丰富的功能，主要完成各功能包、插件的集成，它通过消息或服务的方式接受机器人发布的点云信息、关节状态消息以及机器人的TF坐标变换")]),t._v(" "),v("p",[t._v("另外还需要ROS参数服务器提供机器人的运动学参数，这些"),v("strong",[t._v("参数可根据机器人的URDF模型生成")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://i.loli.net/2021/08/13/P15BUekdr8Fnh6A.png",alt:"2021-08-13 10-49-46 的屏幕截图.png"}})]),t._v(" "),v("p",[v("code",[t._v("move_group")]),t._v("和机器人之间通过"),v("strong",[t._v("Topic")]),t._v("和"),v("strong",[t._v("Action")]),t._v("进行通信，机器人传感器和机器人状态发布者将机器人的关节信息和坐标变换关系发送给"),v("code",[t._v("move_group")])]),t._v(" "),v("p",[v("code",[t._v("move_group")]),t._v("的结构很容易通过插件形式进行拓展，已有的功能模块也是通过插件的形式集成在MoveIt!中的")]),t._v(" "),v("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://i.loli.net/2021/08/13/GqPLHcxFgUeozEu.png",alt:"20200909160019364.png"}}),t._v(" "),v("h3",{attrs:{id:"_1-2运动规划器-motion-planner"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2运动规划器-motion-planner"}},[t._v("#")]),t._v(" 1.2运动规划器（motion_planner）")]),t._v(" "),v("blockquote",[v("p",[t._v("tips：机器人的运动规划指的是在已知机器人初始姿态和目标姿态以及机器人和环境的模型参数的情况下，可以通过某种算法，在避免环境障碍物和防止自身碰撞的同时，找到一条到达目标姿态的较优路径")])]),t._v(" "),v("p",[t._v("在MoveIt!中，运动规划算法由运动规划器来完成，规划算法有很多，每一个运动规划器都是MoveIt!中的一个插件，开发者可以根据需求选用不同的规划算法")]),t._v(" "),v("p",[v("strong",[t._v("在"),v("code",[t._v("move_group")]),t._v("中默认使用的是OMPL算法")])]),t._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://i.loli.net/2021/08/13/wqHhkuP7vSIVCO8.png",alt:"20200904000329215.png"}}),t._v(" "),v("p",[t._v("图中规划请求适配器组（planning request adapters），其功能主要是预处理运动规划请求和响应数据，使之满足规划和使用的需求")]),t._v(" "),v("h3",{attrs:{id:"_1-3规划场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3规划场景"}},[t._v("#")]),t._v(" 1.3规划场景")]),t._v(" "),v("p",[t._v("规划场景为机器人创建一个工作环境，包括界面中的桌面、工件等物体")]),t._v(" "),v("p",[t._v("该功能由move_group节点中的场景监听器（Planning Scene Monitor）实现")]),t._v(" "),v("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://i.loli.net/2021/08/13/48X63KOitn1HUeW.png",alt:"2020090400133915.png"}}),t._v(" "),v("p",[t._v("该插件会监听以下几方面的信息：")]),t._v(" "),v("ul",[v("li",[t._v("状态信息（State Information）：机器人的关节话题")]),t._v(" "),v("li",[t._v("传感器信息（Sensor Information）：机器人的传感器数据")]),t._v(" "),v("li",[t._v("外界环境信息（World geometry information）：通过传感器建立的周围环境信息")])]),t._v(" "),v("h3",{attrs:{id:"_1-4运动学求解器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-4运动学求解器"}},[t._v("#")]),t._v(" 1.4运动学求解器")]),t._v(" "),v("p",[t._v("运动学算法是机械臂各种算法中的核心，包括正向运动学（FK）和反向运动学（IK）")]),t._v(" "),v("p",[t._v("默认情况下使用的运动学求解器是从Orocos项目中移植过来的KDL")]),t._v(" "),v("h3",{attrs:{id:"_1-5碰撞检测器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-5碰撞检测器"}},[t._v("#")]),t._v(" 1.5碰撞检测器")]),t._v(" "),v("p",[t._v("MoveIt!使用CollisionWorld对象进行碰撞检测（Collision Checking），采用FCL（Flexible Collision Library）功能包实现")]),t._v(" "),v("p",[t._v("碰撞检测是运动规划中最耗时的运算之一，为减少计算量可以在MoveIt! Setup Assistant工具中设置免检冲突矩阵（Allowed Collision Matrix，ACM）进行优化")]),t._v(" "),v("h2",{attrs:{id:"二、如何使用moveit"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、如何使用moveit"}},[t._v("#")]),t._v(" 二、如何使用MoveIt!")]),t._v(" "),v("blockquote",[v("p",[t._v("MoveIt!实现机械臂控制的四个步骤")]),t._v(" "),v("ul",[v("li",[t._v("组装：在控制之前需要有机器人，可以是真实的机械臂或者仿真机械臂，但"),v("strong",[t._v("都要")]),t._v("创建完整的URDF机器人模型")]),t._v(" "),v("li",[t._v("配置：在使用MoveIt!控制机械臂之前需要根据URDF模型并使用Setup Assistant工具完成自碰撞矩阵、规划组、终端夹具等配置，完成后生成ROS功能包")]),t._v(" "),v("li",[t._v("驱动：使用ArbotiX或ros_control功能包中的控制器插件实现对机械臂关节的驱动")]),t._v(" "),v("li",[t._v("控制：MoveIt!提供了C++、Python、RViz插件等接口，可以实现机器人关节空间和工作空间下的运动规划")])])]),t._v(" "),v("h2",{attrs:{id:"三、创建机械臂模型-以六轴为例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、创建机械臂模型-以六轴为例"}},[t._v("#")]),t._v(" 三、创建机械臂模型--以六轴为例")]),t._v(" "),v("h3",{attrs:{id:"_3-1声明模型中的宏"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1声明模型中的宏"}},[t._v("#")]),t._v(" 3.1声明模型中的宏")]),t._v(" "),v("p",[t._v("针对机械臂模型定义的宏主要包括三方面：")]),t._v(" "),v("ul",[v("li",[t._v("颜色的宏：定义模型中需要使用的外观颜色，设置颜色的RGBA值")]),t._v(" "),v("li",[t._v("机器人尺寸：通过宏属性定义机器人的三维尺寸，便于修改")]),t._v(" "),v("li",[t._v("惯性矩阵宏：每一个link都需要制定惯性矩阵，可以把该模块提取出来，输入质量参数即可")])]),t._v(" "),v("h3",{attrs:{id:"_3-2创建六轴机械臂模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2创建六轴机械臂模型"}},[t._v("#")]),t._v(" 3.2创建六轴机械臂模型")]),t._v(" "),v("p",[t._v("设计目标是六轴机械臂，机器人需要六个关节，终端还需要装配一个两指夹爪，使用一个关节驱动")]),t._v(" "),v("p",[t._v("具体代码见GitHub中ROS-moveit项目")]),t._v(" "),v("h3",{attrs:{id:"_3-3加入gazebo属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-3加入gazebo属性"}},[t._v("#")]),t._v(" 3.3加入Gazebo属性")]),t._v(" "),v("p",[t._v("加入Gazebo属性的方法和移动机器人的相同，需要对机器人模型设置Gazebo中的link颜色、每个关节的transmission以及ros_control插件")]),t._v(" "),v("p",[t._v("具体代码见GitHub中ROS-moveit项目")]),t._v(" "),v("p",[v("strong",[t._v("注意：机械臂控制往往更加注意运动过程中关节的位置，一般情况下以位置控制为主")])]),t._v(" "),v("p",[t._v("在此处transmission使用的接口是"),v("code",[t._v("PositionJointInterface")])]),t._v(" "),v("p",[t._v("其对应的控制器ros_control插件是"),v("code",[t._v("libgazebo_ros_control.so")])]),t._v(" "),v("h3",{attrs:{id:"_3-4模型展示"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-4模型展示"}},[t._v("#")]),t._v(" 3.4模型展示")]),t._v(" "),v("p",[t._v("设计过程中需要将模型放置在RViz中进行可视化展示，从而验证设计的正确性")]),t._v(" "),v("p",[t._v("使用命令："),v("code",[t._v("$ roslaunch marm_decription view_arm.launch")]),t._v("启动并展示")]),t._v(" "),v("p",[t._v("另外通过拖动joint控制插件中的滑动条，可以看到对应机器人关节的运转，结果如下所示：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://i.loli.net/2021/08/13/mGoiNAnc3rC2bML.png",alt:"2021-08-13 12-18-40 的屏幕截图.png"}})])])}),[],!1,null,null,null);_.default=a.exports}}]);