(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{516:function(t,s,n){"use strict";n.r(s);var a=n(7),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"一、初识stl"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、初识stl"}},[t._v("#")]),t._v(" 一、初识STL")]),t._v(" "),n("ul",[n("li",[t._v("建议一种可以重复利用的东西")]),t._v(" "),n("li",[t._v("C++的面向对象和泛型编程的思想目的就是复用性的提升")]),t._v(" "),n("li",[t._v("多数情况下，数据结构和算法都没有一套标准，导致被迫从事大量的重复工作")]),t._v(" "),n("li",[t._v("为了建立数据结构和算法的一套标准，于是诞生了STL")])]),t._v(" "),n("h3",{attrs:{id:"_1-1基本概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1基本概念"}},[t._v("#")]),t._v(" 1.1基本概念")]),t._v(" "),n("p",[t._v("STL全称为standard template library，"),n("strong",[t._v("标准模板库")])]),t._v(" "),n("p",[t._v("STL从广义上可以分为："),n("strong",[t._v("容器")]),t._v("（container）、"),n("strong",[t._v("算法")]),t._v("（algorithm）、"),n("strong",[t._v("迭代器")]),t._v("（iterator）")]),t._v(" "),n("p",[t._v("容器和算法之间可以通过迭代器进行无缝连接")]),t._v(" "),n("p",[t._v("STL几乎所有的代码都采用了模板类和模板函数")]),t._v(" "),n("h3",{attrs:{id:"_1-2stl六大组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2stl六大组件"}},[t._v("#")]),t._v(" 1.2STL六大组件")]),t._v(" "),n("ul",[n("li",[t._v("容器：各种数据结构，如vector、list、deque、set、map等等，用于存放数据")]),t._v(" "),n("li",[t._v("算法：各种常用的算法，如sort、find、copy、for_each等等")]),t._v(" "),n("li",[t._v("迭代器：扮演了容器与算法之间的胶合剂")]),t._v(" "),n("li",[t._v("仿函数：行为类似函数，可以作为算法的各种策略")]),t._v(" "),n("li",[t._v("适配器：一种用来修饰容器或者放函数或者迭代器接口的东西")]),t._v(" "),n("li",[t._v("空间配置器：负责空间的配置和管理")])]),t._v(" "),n("h3",{attrs:{id:"_1-3容器、算法和迭代器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3容器、算法和迭代器"}},[t._v("#")]),t._v(" 1.3容器、算法和迭代器")]),t._v(" "),n("h4",{attrs:{id:"_1-3-1容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1容器"}},[t._v("#")]),t._v(" 1.3.1容器")]),t._v(" "),n("p",[n("strong",[t._v("容器")]),t._v("：用于存放数据，将运用最广泛的一些数据结构实现出来")]),t._v(" "),n("p",[t._v("常用的数据结构有：数组、链表、树、栈、队列、集合、映射表等等")]),t._v(" "),n("p",[t._v("这些容器又被分为了"),n("strong",[t._v("序列式容器")]),t._v("和"),n("strong",[t._v("关联式容器")]),t._v("：")]),t._v(" "),n("ul",[n("li",[t._v("序列式容器：强调的是值的排序，序列式容器中每个元素均有固定的位置")]),t._v(" "),n("li",[t._v("关联式容器：二叉树结构，各个元素之间没有严格的物理上的顺序关系")])]),t._v(" "),n("h4",{attrs:{id:"_1-3-2算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2算法"}},[t._v("#")]),t._v(" 1.3.2算法")]),t._v(" "),n("p",[n("strong",[t._v("算法")]),t._v("：用于解决数据之间的处理逻辑，通过有限的步骤解决逻辑或数学上的问题")]),t._v(" "),n("p",[t._v("算法分为了"),n("strong",[t._v("质变算法")]),t._v("和"),n("strong",[t._v("非质变算法")]),t._v("：")]),t._v(" "),n("ul",[n("li",[t._v("质变算法：运算过程中会更该区间内元素间的内容，例如拷贝、替换、删除等等")]),t._v(" "),n("li",[t._v("非质变算法：指的是运算过程中不会更该区间内的元素内容，例如查找、计数、遍历、查找极值等等")])]),t._v(" "),n("h4",{attrs:{id:"_1-3-3迭代器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3迭代器"}},[t._v("#")]),t._v(" 1.3.3迭代器")]),t._v(" "),n("p",[n("strong",[t._v("迭代器")]),t._v("：容器和算法之间的粘合剂，提供一种方法使之能够依序寻访某个容器中包含的各个元素，而不需要暴露该容器中内部的表现方式")]),t._v(" "),n("p",[n("strong",[t._v("每个容器都有自己专属的迭代器")])]),t._v(" "),n("p",[t._v("迭代器的使用非常类似于指针，可以将迭代器理解为一种指针")]),t._v(" "),n("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://gitee.com/lee8150951/picture-bed/raw/master/images/202112281452182.png",alt:"image-20211228145236939"}}),t._v(" "),n("p",[t._v("常用的迭代器为双向迭代器和随机访问迭代器")]),t._v(" "),n("h2",{attrs:{id:"二、string容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、string容器"}},[t._v("#")]),t._v(" 二、string容器")]),t._v(" "),n("h3",{attrs:{id:"_2-1基本概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1基本概念"}},[t._v("#")]),t._v(" 2.1基本概念")]),t._v(" "),n("p",[t._v("本质："),n("code",[t._v("string")]),t._v("是C++风格的字符串，而"),n("code",[t._v("string")]),t._v("本质上是一个类")]),t._v(" "),n("p",[n("code",[t._v("string")]),t._v("和"),n("code",[t._v("char*")]),t._v("的区别在于"),n("code",[t._v("char*")]),t._v("是一个指针，另外"),n("code",[t._v("string")]),t._v("是一个类，类的内部封装了"),n("code",[t._v("char*")]),t._v("，用于管理这个字符串，是一个"),n("code",[t._v("char*")]),t._v("型的容器")]),t._v(" "),n("p",[t._v("特点："),n("code",[t._v("string")]),t._v("类内部封装了很多成员方法，例如：查找，拷贝，删除，替换，插入等等")]),t._v(" "),n("p",[n("code",[t._v("string")]),t._v("管理"),n("code",[t._v("char*")]),t._v("所分配的内存，不用担心赋值越界和取值越界的问题，由类内部进行负责")]),t._v(" "),n("h3",{attrs:{id:"_2-2string构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2string构造函数"}},[t._v("#")]),t._v(" 2.2string构造函数")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("string();")]),t._v("创建一个空的字符串，例如：string str;")]),t._v(" "),n("li",[n("code",[t._v("string(const char* s);")]),t._v("使用字符串s进行初始化")]),t._v(" "),n("li",[n("code",[t._v("string(const string& str);")]),t._v("使用一个string对象初始化另一个string对象")]),t._v(" "),n("li",[n("code",[t._v("string(int n, char c);")]),t._v("使用n个字符c进行初始化")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"iostream"')])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    string str_01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认构造")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    string "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("str_02")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用字符串s进行初始化")]),t._v("\n    cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" str_02 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    string "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("str_03")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str_02"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拷贝构造")]),t._v("\n    cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" str_03 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    string "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("str_04")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// n个字符初始化")]),t._v("\n    cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" str_04 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_2-3string赋值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3string赋值"}},[t._v("#")]),t._v(" 2.3string赋值")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("string& operator = (const char* s);")]),t._v("将char类型的字符串赋值给当前的字符串")]),t._v(" "),n("li",[n("code",[t._v("string& operator = (const string& s);")]),t._v("将字符串s赋值给当前的字符串")]),t._v(" "),n("li",[n("code",[t._v("string& operator = (char c);")]),t._v("字符赋值给当前的字符串")]),t._v(" "),n("li",[n("code",[t._v("string& assign(const char* s);")]),t._v("将字符串s赋值给当前的字符串")]),t._v(" "),n("li",[n("code",[t._v("string& assign(const char* s, int n);")]),t._v("将字符串s的前n个字符赋值给当前的字符串")]),t._v(" "),n("li",[n("code",[t._v("string& assign(const string &s);")]),t._v("将字符串s赋值给当前的字符串")]),t._v(" "),n("li",[n("code",[t._v("string& assign(int n, char c);")]),t._v("用n个字符c赋值给当前的字符串")])]),t._v(" "),n("div",{staticClass:"language-cpp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"iostream"')])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    string str_01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    str_01 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" str_01 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    string str_02"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    str_02 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str_01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" str_02 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    str_01 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" str_01 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    str_01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello Cpp"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" str_01 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    str_01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello Cpp"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" str_01 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    str_01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str_02"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" str_01 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    str_01"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" str_01 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_2-4字符串拼接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4字符串拼接"}},[t._v("#")]),t._v(" 2.4字符串拼接")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("string& operatort += (const char* str);")]),t._v("重载+=操作符")]),t._v(" "),n("li",[n("code",[t._v("stringg operator += (const char c);")]),t._v("重载+=操作符")]),t._v(" "),n("li",[n("code",[t._v("string& operator += (const string& str);")]),t._v("重载+=操作符")]),t._v(" "),n("li",[n("code",[t._v("string& append(const char *s);")]),t._v("把字符串s连接到当前字符串结尾")]),t._v(" "),n("li",[n("code",[t._v("string& append(const char *s, int n);")]),t._v("把字符串s的前n个字符连接到当前字符串结尾")]),t._v(" "),n("li",[n("code",[t._v("string& append(const string &s);")]),t._v("同operator+=(const string& str)")]),t._v(" "),n("li",[n("code",[t._v("stringg append(const string &s, int pos, int n);")]),t._v(" //字符串s中从pos开始的n个字符连接到字符串结尾")])]),t._v(" "),n("h3",{attrs:{id:"_2-5查找与替换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5查找与替换"}},[t._v("#")]),t._v(" 2.5查找与替换")]),t._v(" "),n("p",[t._v("查找：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("int find(const string& str, int pos -e) const;")]),t._v("查找str第一次出现位置从pos开始查找")]),t._v(" "),n("li",[n("code",[t._v("int find(const char* s, int pos = 0) const;")]),t._v("查找5第一次出现位置,从pos开始查找")]),t._v(" "),n("li",[n("code",[t._v("int find(const char* s, int pos, int n) const;")]),t._v("从pos位置直找s的前几个字符第一次位置")]),t._v(" "),n("li",[n("code",[t._v("int find(const char c, int pos = 0) const;")]),t._v("查找字符c第一次出现位置")]),t._v(" "),n("li",[n("code",[t._v("int rfind(const string& str, int pos = npos) const;")]),t._v("查找str最后一次位置,从pos开始查找")]),t._v(" "),n("li",[n("code",[t._v("int rfind(const char* s, int pos = npos) const;")]),t._v("查s最后一次出现位置从pos开始查找")]),t._v(" "),n("li",[n("code",[t._v("int rfind (const char* s, int pos, int n) const;")]),t._v("从pos直找s的前n个字符最后一次位置")]),t._v(" "),n("li",[n("code",[t._v("int rfind(const char c, int pos = 0) const;")]),t._v("查找字符c最后一次出现位置")])]),t._v(" "),n("p",[t._v("替换：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("string& replace(int pos, int n, const string& str);")]),t._v("营换从pos开始n个字符为字符串str")]),t._v(" "),n("li",[n("code",[t._v("string& replace(int pos, int n, const char* s);")]),t._v("替换从pos开始的n个字符为字符串s")])]),t._v(" "),n("h3",{attrs:{id:"_2-6string字符串比较"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-6string字符串比较"}},[t._v("#")]),t._v(" 2.6string字符串比较")]),t._v(" "),n("p",[t._v("字符串之间的比较按照字符串的ASCII码进行比较")]),t._v(" "),n("p",[t._v("相等则返回0，大于则返回1，小于返回-1")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("int compare(const string &s) const;")])]),t._v(" "),n("li",[n("code",[t._v("int compare(const char *s) const;")])])]),t._v(" "),n("h3",{attrs:{id:"_2-7字符获取"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-7字符获取"}},[t._v("#")]),t._v(" 2.7字符获取")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("char& operator[](int n);")]),t._v("通过"),n("code",[t._v("[]")]),t._v("的方式获取单个字符")]),t._v(" "),n("li",[n("code",[t._v("char& at(int n);")]),t._v("通过at方法获取单个字符")])]),t._v(" "),n("h3",{attrs:{id:"_2-8插入与删除"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-8插入与删除"}},[t._v("#")]),t._v(" 2.8插入与删除")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("string& insert(int pos, const char* s);")]),t._v("插入字符串")]),t._v(" "),n("li",[n("code",[t._v("string& insert(int pos, const string& str);")]),t._v("插入字符串")]),t._v(" "),n("li",[n("code",[t._v("string& insert(int pos, int n, char c);")]),t._v("在指定位置插入n个字符c")]),t._v(" "),n("li",[n("code",[t._v("string& erase(int pos, int n = npos);")]),t._v("删除从Pos开始的n个字符")])]),t._v(" "),n("h3",{attrs:{id:"_2-9截取子串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-9截取子串"}},[t._v("#")]),t._v(" 2.9截取子串")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("string substring(int pos = 0, int n = npos) const;")]),t._v("返回从pos开始的n个字符串组成的子串")])])])}),[],!1,null,null,null);s.default=r.exports}}]);