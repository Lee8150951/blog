(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{509:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、map和unordered-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、map和unordered-map"}},[t._v("#")]),t._v(" 一、map和unordered_map")]),t._v(" "),a("p",[a("strong",[t._v("区别：")])]),t._v(" "),a("ul",[a("li",[t._v("引用的有文件不同，map引入的头文件为"),a("code",[t._v("#include<map>")]),t._v("而unordered_map引入的头文件问"),a("code",[t._v("#include<unordered_map>")])]),t._v(" "),a("li",[t._v("内部实现原理不同：\n"),a("ul",[a("li",[t._v("map：map内部实现了一个"),a("strong",[t._v("红黑树")]),t._v("，其具有自动排序的功能，因此"),a("strong",[t._v("map内所有的元素都是有序的")]),t._v("，其中每一个节点都表示map中的一个元素。因此可以理解为对map进行的增删改查等一系列操作都是对于红黑树的一种操作")]),t._v(" "),a("li",[t._v("unordered_map：内部实现了一个哈希表，通过把关键码值映射到Hash表中一个位置来访问记录，查找的时间复杂度可达到O(1)，其在海量数据处理中有着广泛应用，"),a("strong",[t._v("unordered_map内所有的元素都是无序的")])])])])]),t._v(" "),a("p",[a("strong",[t._v("优缺点：")])]),t._v(" "),a("ul",[a("li",[t._v("map\n"),a("ul",[a("li",[t._v("优点："),a("strong",[t._v("有序性")]),t._v("，其元素的有序性在很多应用中都会简化很多的操作，内部实现的红黑树使得map的很多操作在lgn的时间复杂度下就可以实现，因此效率非常的高")]),t._v(" "),a("li",[t._v("缺点："),a("strong",[t._v("空间占用率高")]),t._v("，因为map内部实现了红黑树，虽然提高了运行效率，但是因为每一个节点都需要额外保存父节点、孩子节点和红/黑性质，使得每一个节点都占用大量的空间")]),t._v(" "),a("li",[t._v("适用处：处理有序问题")])])]),t._v(" "),a("li",[t._v("unordered_map\n"),a("ul",[a("li",[t._v("优点：内部实现了哈希表，因此其"),a("strong",[t._v("查找速度非常的快")])]),t._v(" "),a("li",[t._v("缺点：哈希表的"),a("strong",[t._v("建立比较耗费时间")])]),t._v(" "),a("li",[t._v("适用处：对于查找问题unordered_map会更加高效，因此查找问题常会考虑使用unordered_map")])])])]),t._v(" "),a("h2",{attrs:{id:"二、快慢指针思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、快慢指针思想"}},[t._v("#")]),t._v(" 二、快慢指针思想")]),t._v(" "),a("p",[t._v("在解决有诸如环形链表的问题是可以使用到的一种指针思想")]),t._v(" "),a("p",[t._v("在这个思想中，可以类比于两个奔跑选手，一个跑的快，一个跑得慢。在龟兔赛跑的寓言中，跑的慢的称为 “乌龟”，跑得快的称为 “兔子”。找出循环，"),a("strong",[t._v("“快指针” 每次走两步，“慢指针” 每次走一步，当二者相等时，即为一个循环周期")]),t._v("。一旦快指针与慢指针发生重合，说明该循环内出现“环”。")]),t._v(" "),a("p",[t._v("如下图所示")]),t._v(" "),a("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://gitee.com/lee8150951/picture-bed/raw/master/images/202201211246218.png",alt:"image-20220121124631961"}}),t._v(" "),a("img",{staticStyle:{zoom:"40%"},attrs:{src:"https://gitee.com/lee8150951/picture-bed/raw/master/images/202201211250084.png",alt:"image-20220121125006049"}}),t._v(" "),a("h2",{attrs:{id:"三、api小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、api小结"}},[t._v("#")]),t._v(" 三、API小结")]),t._v(" "),a("h3",{attrs:{id:"_3-1创建map-unordered-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1创建map-unordered-map"}},[t._v("#")]),t._v(" 3.1创建map\\unordered_map")]),t._v(" "),a("p",[t._v("可以直接使用大括号进行初始化：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("unordered_map"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" dictionary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'V'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'X'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'L'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'D'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'M'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-2string的length-和size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2string的length-和size"}},[t._v("#")]),t._v(" 3.2string的length()和size()")]),t._v(" "),a("p",[t._v("在C++标准库中的string中两者的源代码如下")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("size_type __CLR_OR_THIS_CALL "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return length of sequence")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_Mysize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("size_type __CLR_OR_THIS_CALL "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return length of sequence")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_Mysize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),a("p",[t._v("两者没有任何区别，length是因为沿用C语言的习惯而保留下来的，string类最初只有length，引入STL之后，为了兼容又加入了size，它是作为STL容器的属性存在的，便于符合STL的接口规则，以便用于STL的算法。")]),t._v(" "),a("p",[a("strong",[t._v("string类的size()/length()方法返回的是字节数，不管是否有汉字")])]),t._v(" "),a("h3",{attrs:{id:"_3-3char单个字符转string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3char单个字符转string"}},[t._v("#")]),t._v(" 3.3char单个字符转string")]),t._v(" "),a("p",[t._v("在cpp中可以使用string的构造方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("string(size_t n, char c)")])])]),t._v(" "),a("p",[t._v("其中size_t表示目标字符重复个数，c表示目标字符")]),t._v(" "),a("h3",{attrs:{id:"_3-4判断是否存在"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4判断是否存在"}},[t._v("#")]),t._v(" 3.4判断是否存在")]),t._v(" "),a("p",[t._v("注意STL中很多容器的find方法都适用于判断一个元素是否存在，当不存在时返回的是一个指向end的迭代器")]),t._v(" "),a("p",[t._v("所有以set为例："),a("code",[t._v("set.find(n)==set.end()")]),t._v("表示该元素n不存在于set列表中")])])}),[],!1,null,null,null);s.default=e.exports}}]);