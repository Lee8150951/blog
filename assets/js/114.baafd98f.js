(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{609:function(a,t,s){"use strict";s.r(t);var n=s(7),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"一、action"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、action"}},[a._v("#")]),a._v(" 一、action")]),a._v(" "),s("p",[a._v("action通讯机制：一种带有连续反馈的上层通讯机制，底层基于ROS话题通讯")]),a._v(" "),s("p",[a._v("在很多情况下，话题（Topic）和服务（Service），但在很多场景下往往满足不了需求。例如：在机械臂控制中，如果用话题发布运动目标，由于话题是单向通信，则需要订阅一个话题来获得机器人运动过程中的状态反馈；如果由服务发布运动目标，虽然可以获得一次反馈信息，但是对于控制来说数据很少，而当反馈没有收到时，只能做等待操作")]),a._v(" "),s("h3",{attrs:{id:"_1-1概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1概念"}},[a._v("#")]),a._v(" 1.1概念")]),a._v(" "),s("p",[a._v("action是一种类似于Service的问答通讯机制，不同之处在于action带有连续的反馈，可以不断的反馈任务进度，也可以在任务执行过程中终止运行")]),a._v(" "),s("h3",{attrs:{id:"_1-2工作机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2工作机制"}},[a._v("#")]),a._v(" 1.2工作机制")]),a._v(" "),s("p",[a._v("action采用客户端/服务端（Client/Server）的工作模式")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img10.360buyimg.com/ddimg/jfs/t1/192599/18/20964/29318/612ed89cE36a5d9ee/a24c77a0bbc1c1ae.png",alt:"clip_image002.png"}})]),a._v(" "),s("p",[a._v("客户端与服务端之间通过actionlib定义的"),s("code",[a._v("action protocol")]),a._v("进行通信")]),a._v(" "),s("p",[a._v("这种通讯机制基于ROS消息机制实现，为用户提供了如下所示Client/Server接口")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img13.360buyimg.com/ddimg/jfs/t1/202547/34/4149/23454/612ed89cE70ccac7e/9b108a5f0f8e6f9c.png",alt:"clip_image004_thumb.png"}})]),a._v(" "),s("blockquote",[s("p",[a._v("action提供的Topics列表：")]),a._v(" "),s("ul",[s("li",[a._v("goal：发布任务目标")]),a._v(" "),s("li",[a._v("cancel：请求取消任务")]),a._v(" "),s("li",[a._v("status：通知Client当前任务")]),a._v(" "),s("li",[a._v("feedback：周期反馈任务运行的监控数据")]),a._v(" "),s("li",[a._v("result：向Client发送任务的执行结果，只发布一次")])])]),a._v(" "),s("h3",{attrs:{id:"_1-3定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3定义"}},[a._v("#")]),a._v(" 1.3定义")]),a._v(" "),s("p",[s("strong",[a._v("action通过.action文件进行定义，放置在action文件夹下")]),a._v("，文件格式如下：")]),a._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 定义目标信息goal")]),a._v("\nuint32 dishwasher_id  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 指定我们要使用的dishwasher")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("---")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 定义结果信息result")]),a._v("\nuint32 total_dishes_cleaned\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("---")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 定义周期反馈信息feedback")]),a._v("\nfloat32 percent_complete\n")])])]),s("p",[a._v("在一个action定义中需要定义三个部分：goal、result、feedback")]),a._v(" "),s("p",[a._v("创建.action文件之后，还需要将该文件进行编译，和自定义message和service文件一样，需要在CMakeLists.txt文件中添加如下规则：")]),a._v(" "),s("div",{staticClass:"language-cmake extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cmake"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("find_package")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("catkin REQUIRED genmsg actionlib_msgs actionlib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add_action_files")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("DIRECTORY action FILES DoDishes.action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("generate_messages")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("DEPENDENCIES actionlib_msgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("在功能包中的package.xml中添加如下配置：")]),a._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("build_depend")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("actionlib"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("build_depend")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("build_depend")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("actionlib_msgs"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("build_depend")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("run_depend")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("actionlib"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("run_depend")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("run_depend")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("actionlib_msgs"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("run_depend")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),s("p",[a._v("编译后可产生一系列.msg文件")]),a._v(" "),s("p",[a._v("从编译后的文件可以看出，action是基于message的，更高层的一种通讯机制")]),a._v(" "),s("h3",{attrs:{id:"_1-4实现action通讯"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4实现action通讯"}},[a._v("#")]),a._v(" 1.4实现action通讯")]),a._v(" "),s("h4",{attrs:{id:"_1-4-1客户端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1客户端"}},[a._v("#")]),a._v(" 1.4.1客户端")]),a._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('#include <actionlib/client/simple_action_client.h>\n#include "action_tutorials/DoDishesAction.h"\n \ntypedef actionlib::SimpleActionClient<action_tutorials::DoDishesAction> Client;\n \n// 当action完成后会调用次回调函数一次\nvoid doneCb(const actionlib::SimpleClientGoalState& state,\n        const action_tutorials::DoDishesResultConstPtr& result)\n{\n    ROS_INFO("Yay! The dishes are now clean");\n    ros::shutdown();\n}\n \n// 当action激活后会调用次回调函数一次\nvoid activeCb()\n{\n    ROS_INFO("Goal just went active");\n}\n \n// 收到feedback后调用的回调函数\nvoid feedbackCb(const action_tutorials::DoDishesFeedbackConstPtr& feedback)\n{\n    ROS_INFO(" percent_complete : %f ", feedback->percent_complete);\n}\n \nint main(int argc, char** argv)\n{\n    ros::init(argc, argv, "do_dishes_client");\n \n    // 定义一个客户端\n    Client client("do_dishes", true);\n \n    // 等待服务器端\n    ROS_INFO("Waiting for action server to start.");\n    client.waitForServer();\n    ROS_INFO("Action server started, sending goal.");\n \n    // 创建一个action的goal\n    action_tutorials::DoDishesGoal goal;\n    goal.dishwasher_id = 1;\n \n    // 发送action的goal给服务器端，并且设置回调函数\n    client.sendGoal(goal,  &doneCb, &activeCb, &feedbackCb);\n \n    ros::spin();\n \n    return 0;\n}\n')])])]),s("h4",{attrs:{id:"_1-4-2服务端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-2服务端"}},[a._v("#")]),a._v(" 1.4.2服务端")]),a._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('#include <ros/ros.h>\n#include <actionlib/server/simple_action_server.h>\n#include "action_tutorials/DoDishesAction.h"\n \ntypedef actionlib::SimpleActionServer<action_tutorials::DoDishesAction> Server;\n \n// 收到action的goal后调用的回调函数\nvoid execute(const action_tutorials::DoDishesGoalConstPtr& goal, Server* as)\n{\n    ros::Rate r(1);\n    action_tutorials::DoDishesFeedback feedback;\n \n    ROS_INFO("Dishwasher %d is working.", goal->dishwasher_id);\n \n    // 假设洗盘子的进度，并且按照1hz的频率发布进度feedback\n    for(int i=1; i<=10; i++)\n    {\n        feedback.percent_complete = i * 10;\n        as->publishFeedback(feedback);\n        r.sleep();\n    }\n \n    // 当action完成后，向客户端返回结果\n    ROS_INFO("Dishwasher %d finish working.", goal->dishwasher_id);\n    as->setSucceeded();\n}\n \nint main(int argc, char** argv)\n{\n    ros::init(argc, argv, "do_dishes_server");\n    ros::NodeHandle n;\n \n    // 定义一个服务器\n    Server server(n, "do_dishes", boost::bind(&execute, _1, &server), false);\n \n    // 服务器开始运行\n    server.start();\n \n    ros::spin();\n \n    return 0;\n}\n')])])]),s("h4",{attrs:{id:"_1-4-3运行效果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-3运行效果"}},[a._v("#")]),a._v(" 1.4.3运行效果")]),a._v(" "),s("p",[a._v("使用如下命令运行客户端节点，由于服务器没有启动，客户端会保持等待状态")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("$ rosrun action_tutorials DoDisher_client\n")])])]),s("p",[a._v("后运行服务端节点，客户端可以看到反馈的进度信息")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("$ rosrun action_tutorials DoDisher_server\n")])])]),s("h2",{attrs:{id:"二、plugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、plugin"}},[a._v("#")]),a._v(" 二、plugin")]),a._v(" "),s("p",[a._v("ROS开发中常常需要使用到plugin插件，在使用插件时，不需要考虑plugin类的连接位置，只需要将插件注册到"),s("strong",[a._v("pluginlib")]),a._v("中即可动态加载")]),a._v(" "),s("h3",{attrs:{id:"_2-1工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1工作原理"}},[a._v("#")]),a._v(" 2.1工作原理")]),a._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://img10.360buyimg.com/ddimg/jfs/t1/202161/21/4161/124637/612ee074Ecd49e2ef/a9d77e2d31ca189f.png",alt:"捕获.PNG"}}),a._v(" "),s("h3",{attrs:{id:"_2-2实现插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2实现插件"}},[a._v("#")]),a._v(" 2.2实现插件")]),a._v(" "),s("p",[a._v("利用C++多态特性，不同插件只需要使用统一的接口就可以替换使用，选择需要使用的插件即可拓展相应的功能")]),a._v(" "),s("p",[a._v("一般来说，要实现一个插件，主要分为如下几步：")]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("创建基类，定义统一接口（如果基于现有积累实现插件，则不需要这个步骤）")]),a._v(" "),s("li",[a._v("创建plugin类，继承基类，实现统一的接口")]),a._v(" "),s("li",[a._v("注册插件")]),a._v(" "),s("li",[a._v("编译生成插件的动态链接库")]),a._v(" "),s("li",[a._v("将插件加入ROS中")])])]),a._v(" "),s("p",[a._v("首先创建一个pluginlib_tutorials功能包，"),s("strong",[a._v("注意添加依赖pluginlib")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("$ catkin_create_pkg plugin_tutorials roscpp pluginlib\n")])])]),s("h3",{attrs:{id:"_2-3创建基类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3创建基类"}},[a._v("#")]),a._v(" 2.3创建基类")]),a._v(" "),s("p",[a._v("创建一个polygon的基类（polygon_base.h），定义了一些简单的接口，需要注意的是initialize()这个接口的作用")]),a._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#ifndef PLUGINLIB_TUTORIALS_POLYGON_BASE_H_\n#define PLUGINLIB_TUTORIALS_POLYGON_BASE_H_\n \nnamespace polygon_base\n{\n  class RegularPolygon\n  {\n    public:\n      //pluginlib要求构造函数不能带有参数，所以定义initialize来完成需要初始化的工作\n      virtual void initialize(double side_length) = 0;\n \n      //计算面积的接口函数\n      virtual double area() = 0;\n \n      virtual ~RegularPolygon(){}\n \n    protected:\n      RegularPolygon(){}\n  };\n};\n#endif\n")])])]),s("h3",{attrs:{id:"_2-4创建plugin类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4创建plugin类"}},[a._v("#")]),a._v(" 2.4创建plugin类")]),a._v(" "),s("p",[a._v("接下来创建rectangle_plugin和triangle_plugin类（polygon_plugins.h），实现基类的接口，也可以添加plugin自己需要的接口")]),a._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#ifndef PLUGINLIB_TUTORIALS_POLYGON_PLUGINS_H_\n#define PLUGINLIB_TUTORIALS_POLYGON_PLUGINS_H_\n#include <pluginlib_tutorials/polygon_base.h>\n#include <cmath>\n \nnamespace polygon_plugins\n{\n  class Triangle : public polygon_base::RegularPolygon\n  {\n    public:\n      Triangle() : side_length_() {}\n \n      // 初始化边长\n      void initialize(double side_length)\n      {\n        side_length_ = side_length;\n      }\n \n      double area()\n      {\n        return 0.5 * side_length_ * getHeight();\n      }\n \n      // Triangle类自己的接口\n      double getHeight()\n      {\n        return sqrt((side_length_ * side_length_) - ((side_length_ / 2) * (side_length_ / 2)));\n      }\n \n    private:\n      double side_length_;\n  };\n \n  class Square : public polygon_base::RegularPolygon\n  {\n    public:\n      Square() : side_length_() {}\n \n      // 初始化边长\n      void initialize(double side_length)\n      {\n        side_length_ = side_length;\n      }\n \n      double area()\n      {\n        return side_length_ * side_length_;\n      }\n \n    private:\n      double side_length_;\n \n  };\n};\n#endif\n")])])]),s("h3",{attrs:{id:"_2-5注册插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5注册插件"}},[a._v("#")]),a._v(" 2.5注册插件")]),a._v(" "),s("p",[a._v("接下来我们还需要创建一个cpp文件（polygon_plugins.cpp），来注册插件，声明我们创建了两个插件：")]),a._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("//包含pluginlib的头文件，使用pluginlib的宏来注册插件\n#include <pluginlib/class_list_macros.h>\n#include <pluginlib_tutorials/polygon_base.h>\n#include <pluginlib_tutorials/polygon_plugins.h>\n \n//注册插件，宏参数：plugin的实现类，plugin的基类\nPLUGINLIB_EXPORT_CLASS(polygon_plugins::Triangle, polygon_base::RegularPolygon);\nPLUGINLIB_EXPORT_CLASS(polygon_plugins::Square, polygon_base::RegularPolygon);\n")])])]),s("h3",{attrs:{id:"_2-6编译动态链接库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6编译动态链接库"}},[a._v("#")]),a._v(" 2.6编译动态链接库")]),a._v(" "),s("p",[a._v("为了编译该功能包，需要修改CMakefile.txt文件，加入如下两条编译规则：")]),a._v(" "),s("div",{staticClass:"language-cmake extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cmake"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("include_directories")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("include"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("add_library")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("polygon_plugins src/polygon_plugins.cpp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h3",{attrs:{id:"_2-7将插件加入ros"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7将插件加入ros"}},[a._v("#")]),a._v(" 2.7将插件加入ROS")]),a._v(" "),s("p",[a._v("为了便于使用插件，还需要编写xml文件将plugin加入ROS中")]),a._v(" "),s("p",[a._v("这里需要创建和修改功能包"),s("strong",[a._v("根目录")]),a._v("下的两个xml文件")]),a._v(" "),s("h4",{attrs:{id:"_2-7-1创建plugin-tuttorials-polygon-plugins-xml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-1创建plugin-tuttorials-polygon-plugins-xml"}},[a._v("#")]),a._v(" 2.7.1创建plugin_tuttorials/polygon_plugins.xml")]),a._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("library")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("path")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("lib/libpluginlib_tutorials"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("pluginlib_tutorials/regular_triangle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("polygon_plugins::Triangle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("base_class_type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("polygon_base::RegularPolygon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("This is a triangle plugin."),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("pluginlib_tutorials/regular_square"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("polygon_plugins::Square"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("base_class_type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("polygon_base::RegularPolygon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("This is a square plugin."),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("library")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),s("p",[a._v("该xml文件主要描述了plugin的动态库路径、实现类、基类、功能描述等信息")]),a._v(" "),s("h4",{attrs:{id:"_2-7-2修改plugin-tuttorials-package-xml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-2修改plugin-tuttorials-package-xml"}},[a._v("#")]),a._v(" 2.7.2修改plugin_tuttorials/package.xml")]),a._v(" "),s("p",[a._v("添加如下代码")]),a._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("export")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("pluginlib_tutorials")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("plugin")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("${prefix}/polygon_plugins.xml"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("/>")])]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("export")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),s("p",[a._v("然后可以通过如下命令查看功能包的插件路径")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("$ rospack plugins --attrib"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("plugin pluginlib_tutorials\n")])])]),s("h3",{attrs:{id:"_2-8调用插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8调用插件"}},[a._v("#")]),a._v(" 2.8调用插件")]),a._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('#include <boost/shared_ptr.hpp>\n \n#include <pluginlib/class_loader.h>\n#include <pluginlib_tutorials/polygon_base.h>\n \nint main(int argc, char** argv)\n{\n  // 创建一个ClassLoader，用来加载plugin\n  pluginlib::ClassLoader<polygon_base::RegularPolygon> poly_loader("pluginlib_tutorials", "polygon_base::RegularPolygon");\n \n  try\n  {\n    // 加载Triangle插件类，路径在polygon_plugins.xml中定义\n    boost::shared_ptr<polygon_base::RegularPolygon> triangle = poly_loader.createInstance("pluginlib_tutorials/regular_triangle");\n \n    // 初始化边长\n    triangle->initialize(10.0);\n \n    ROS_INFO("Triangle area: %.2f", triangle->area());\n  }\n  catch(pluginlib::PluginlibException& ex)\n  {\n    ROS_ERROR("The plugin failed to load for some reason. Error: %s", ex.what());\n  }\n \n  try\n  {\n    boost::shared_ptr<polygon_base::RegularPolygon> square = poly_loader.createInstance("pluginlib_tutorials/regular_square");\n    square->initialize(10.0);\n \n    ROS_INFO("Square area: %.2f", square->area());\n  }\n  catch(pluginlib::PluginlibException& ex)\n  {\n    ROS_ERROR("The plugin failed to load for some reason. Error: %s", ex.what());\n  }\n \n  return 0;\n}\n')])])])])}),[],!1,null,null,null);t.default=e.exports}}]);